---
format:
  html:
    embed-resources: true
    code-fold: true
execute: 
  echo: true
jupyter: python3
jupyterlite: true
lang: de
bibliography: Literatur.bib
---

<!--
headlines:
  off: true
extended-content:
  off: false
included-content:
  off: false
worksheets:
  off: true
-->

<!--
title: "DEB Produktentwicklung"
format:
  html:
    embed-resources: true

author:
  - name: "Christian Anders"
    degrees: 
    roles: "Dozent"
    email: christian.anders@hs-esslingen.de
    affiliation: 
      - name: "Hochschule Esslingen"
        department: "Wirtschaft & Technik"
        group: "Digital Engineering (DEB)"
        city: "Esslingen am Neckar"
        postal-code: 73728
        country: "Deutschland"
        url: https://www.hs-esslingen.de/
abstract: > 
  Skript zur Vorlesung und Labor *"Produktentwicklung"* f√ºr den Studiengang Digital Engineering DEB
keywords:
  - Zufall
  - Monty-Hall-Problem

copyright: 
  holder: Christian Anders
  year: 2025
lang: de
bibliography: Literatur.bib
date: last-modified
toc: true
number-sections: true
scrollable: true
toc-location: right
cap-location: bottom
number-offset: 0
link-external-icon: true
link-external-newwindow: true
-->

<!--
number-offset: 
0 Grundlagen
1 Ideenfindung und Konzeptentwicklung
2 Entwurfs- und Entwicklungsphase
3 Prototyping und Test
4 Produktionsplanung und Produktion
5 Softskills
6 Literatur 
7 Anhang
-->

<!-- -------------------------------------------------------------------------

                       Monty-Hall-Problem

-------------------------------------------------------------------------- -->

::: {.content-visible unless-meta="headlines.off"}
# Grundlagen
## Komplexe Systeme
:::

<!-- -------------------------------------------------------------------------

                       Callout !!! WARNING !!!

-------------------------------------------------------------------------- -->
<!--
::: {.callout-warning}
## WARNING!
**THIS CHAPTER IS STILL WORK IN PROGRESS!!!**
:::
-->

### Monty-Hall-Problem {#sec-montyhallproblem}

Das **Monty-Hall-Problem** ist ein klassisches Beispiel f√ºr ein kontraintuitives Wahrscheinlichkeitsr√§tsel aus der Spieltheorie und Statistik. Es basiert auf der US-Spielshow *Let's Make a Deal*, die von Monty Hall moderiert wurde.

### Die Grundsituation:
- Du bist Kandidat in einer Spielshow.
- Vor dir stehen **drei T√ºren**.
- Hinter einer T√ºr ist ein **Auto** (Hauptgewinn), hinter den anderen beiden jeweils eine **Ziege** (Niete).
- Du w√§hlst eine T√ºr (z.‚ÄØB. T√ºr 1).
- Der Moderator (der wei√ü, was sich hinter den T√ºren befindet) √∂ffnet **eine der anderen beiden T√ºren** (z.‚ÄØB. T√ºr 3) und zeigt dir **eine Ziege**.
- Dann fragt er dich: **"M√∂chtest du bei deiner Wahl bleiben oder zu der anderen noch geschlossenen T√ºr wechseln?"**

### Die entscheidende Frage:
**Solltest du bei deiner urspr√ºnglichen Wahl bleiben oder wechseln?**

### Die Antwort:
**Du solltest immer wechseln.**

### Warum?
- Wenn du **nicht wechselst**, ist deine Gewinnchance **1/3** (du hattest urspr√ºnglich 1 von 3 Chancen, das Auto zu w√§hlen).
- Wenn du **wechselst**, ist deine Gewinnchance **2/3** ‚Äì denn:
  - In 2 von 3 F√§llen hattest du anfangs eine Ziege gew√§hlt.
  - Monty zeigt dir dann eine andere Ziege, und das Auto ist hinter der verbleibenden T√ºr.
  - Wechseln bringt dich also in diesen 2 von 3 F√§llen zum Gewinn.

Es wirkt paradox, weil es sich intuitiv so anf√ºhlt, als w√§re die Chance nach Montys Enth√ºllung **50:50** ‚Äì aber das ist ein Trugschluss.




## üß† Grundannahmen:

- Es gibt **3 T√ºren**: hinter einer ist das **Auto**, hinter zwei sind **Ziegen**.
- Der Spieler w√§hlt eine T√ºr (z.‚ÄØB. T√ºr 1).
- Der Moderator kennt die Position des Autos und √∂ffnet **eine der anderen beiden T√ºren mit einer Ziege**.
- Danach darf der Spieler entscheiden: **bleiben** oder **wechseln**.

---

## üéØ Was sind die Gewinnwahrscheinlichkeiten?

### 1. **Wenn du bei deiner Wahl bleibst:**
- Deine urspr√ºngliche Wahl war rein zuf√§llig.
- Du hast also mit **1/3 Wahrscheinlichkeit** das Auto gew√§hlt.
- Wenn du **bleibst**, gewinnst du **nur in diesem Fall**.
  
üìå **Chance beim Behalten: 1/3 (ca. 33,3‚ÄØ%)**

---

### 2. **Wenn du wechselst:**
- In **2/3 der F√§lle** hast du urspr√ºnglich **eine Ziege** gew√§hlt.
- In diesen F√§llen wird der Moderator dir die **andere Ziege zeigen** ‚Äì und die **verbleibende T√ºr enth√§lt das Auto**.
- Nur wenn du anfangs das Auto gew√§hlt hast (1/3), verlierst du durch den Wechsel.

üìå **Chance beim Wechseln: 2/3 (ca. 66,6‚ÄØ%)**

---

## üîç Visualisierte Wahrscheinlichkeitsverteilung:

| Auto ist hinter... | Spieler w√§hlt... | Host zeigt... | Wenn du **bleibst** | Wenn du **wechselst** |
|---------------------|------------------|---------------|---------------------|------------------------|
| T√ºr 1               | T√ºr 1            | T√ºr 2 oder 3  | **Gewinn (1/3)**     | Verlust                |
| T√ºr 2               | T√ºr 1            | T√ºr 3         | Verlust              | **Gewinn (1/3)**       |
| T√ºr 3               | T√ºr 1            | T√ºr 2         | Verlust              | **Gewinn (1/3)**       |

‚Üí **Behalten bringt nur in 1 von 3 F√§llen den Sieg. Wechseln in 2 von 3 F√§llen.**



**100-T√ºren-Analogie**:

---

## üéØ Ausgangssituation:

- Du bist in einer Spielshow mit **100 T√ºren**.
- Hinter **einer** T√ºr ist ein **Auto**, hinter den **anderen 99** sind **Ziegen**.
- Du w√§hlst **eine T√ºr**, z.‚ÄØB. **T√ºr 1**.
- Der Moderator wei√ü, wo das Auto ist ‚Äì und √∂ffnet jetzt **98 andere T√ºren**, hinter denen **nur Ziegen** sind.
- Es bleiben **zwei T√ºren √ºbrig**:  
  üëâ Deine urspr√ºnglich gew√§hlte (T√ºr 1)  
  üëâ Eine andere geschlossene T√ºr (z.‚ÄØB. T√ºr 42)

Jetzt fragt er dich:  
**"Willst du bei deiner Wahl bleiben oder zu T√ºr 42 wechseln?"**

---

## üß† Was ist deine beste Option?

### 1. **Bleiben bei T√ºr 1:**
- Deine urspr√ºngliche Wahl war **zuf√§llig aus 100**.
- Also hast du mit **1/100 = 1‚ÄØ%** Wahrscheinlichkeit das Auto gew√§hlt.

### 2. **Wechseln zu T√ºr 42:**
- In **99 von 100 F√§llen** hattest du **eine Ziege** gew√§hlt.
- Der Moderator **wei√ü**, wo das Auto ist ‚Äì also kann er **immer** 98 T√ºren mit Ziegen √∂ffnen.
- Das Auto ist dann **in 99 von 100 F√§llen** **hinter der verbleibenden T√ºr**.

---

## üìå Fazit:

- **Bleiben:** 1‚ÄØ% Gewinnchance  
- **Wechseln:** **99‚ÄØ% Gewinnchance**

---


### üîÅ Das gleiche Prinzip funktioniert auch bei 3 T√ºren:
- Bleiben = 1/3  
- Wechseln = 2/3  
Aber mit 100 T√ºren wird der Denkfehler viel klarer ‚Äì weil es so extrem wirkt.



### Diagramm 100-T√ºren-Analogie:


Aufbau des Diagramms:
1. Startpunkt:
Box oder Kreis mit dem Text:

vbnet
Kopieren
Bearbeiten
Start: 100 T√ºren
(1 Auto, 99 Ziegen)
üîΩ Pfeil nach unten zu ‚Ä¶

2. Erste Entscheidung des Spielers:
N√§chste Box:

r
Kopieren
Bearbeiten
Spieler w√§hlt zuf√§llig T√ºr 1
üîΩ Pfeil nach unten zu ‚Ä¶

3. Aktion des Moderators:
Box mit:

css
Kopieren
Bearbeiten
Moderator √∂ffnet 98 T√ºren mit Ziegen
(kennt die Position des Autos!)
üîΩ Pfeil nach unten zu ‚Ä¶

4. Zwei verbleibende T√ºren:
Box:

r
Kopieren
Bearbeiten
Nur 2 T√ºren bleiben geschlossen:
- T√ºr 1 (deine Wahl)
- T√ºr 42 (eine andere T√ºr)
üîΩ Zwei Pfeile zur Seite:
‚Üí Nach links: Behalten
‚Üí Nach rechts: Wechseln

5. Entscheidungs√§ste:
Links: Behalten
Box:

r
Kopieren
Bearbeiten
T√ºr 1 behalten
‚Üí Gewinnchance: 1 %
Rechts: Wechseln
Box:

r
Kopieren
Bearbeiten
Zu T√ºr 42 wechseln
‚Üí Gewinnchance: 99 %
üí° Optional:
Du kannst farblich hervorheben:

T√ºr 1 (deine Wahl)

T√ºr 42 (verbleibende, m√∂gliche Autot√ºr)

Die Wahrscheinlichkeiten fett oder farbig darstellen.



# Monty Hall Simulation
# =====================
# In diesem Notebook wird das ber√ºhmte Monty-Hall-Problem simuliert.
```{python}
import random
import matplotlib.pyplot as plt

def monty_hall_simulation(switch: bool, num_trials: int = 10000) -> float:
    """Simuliert das Monty-Hall-Problem.

    Args:
        switch (bool): True, wenn der Spieler die T√ºr wechselt, sonst False.
        num_trials (int): Anzahl der Simulationsdurchl√§ufe.

    Returns:
        float: Gewinnrate.
    """
    wins = 0

    for _ in range(num_trials):
        # Verstecke das Auto hinter einer der drei T√ºren
        car_door = random.randint(0, 2)

        # Spieler w√§hlt zuf√§llig eine T√ºr
        player_choice = random.randint(0, 2)

        # Moderator √∂ffnet eine T√ºr, die weder die Autot√ºr noch die gew√§hlte T√ºr ist
        remaining_doors = [i for i in range(3) if i != player_choice and i != car_door]
        door_opened_by_host = random.choice(remaining_doors)

        # Wenn Spieler wechselt, w√§hlt er die andere noch geschlossene T√ºr
        if switch:
            final_choice = next(i for i in range(3) if i != player_choice and i != door_opened_by_host)
        else:
            final_choice = player_choice

        if final_choice == car_door:
            wins += 1

    return wins / num_trials

# Simulation durchf√ºhren
trials = 100
win_rate_switch = monty_hall_simulation(switch=True, num_trials=trials)
win_rate_stay = monty_hall_simulation(switch=False, num_trials=trials)

# Ergebnisse anzeigen
print(f"Gewinnrate beim Wechseln: {win_rate_switch:.1%}")
print(f"Gewinnrate beim Behalten: {win_rate_stay:.1%}")

# Plot
labels = ['Wechseln', 'Behalten']
rates = [win_rate_switch, win_rate_stay]

plt.bar(labels, rates, color=['orange', 'red'])
plt.ylim(0, 1)
plt.ylabel('Gewinnrate')
plt.title(f'Monty-Hall-Simulation ({trials} Versuche)')
plt.grid(True, axis='y', linestyle='--', alpha=0.7)
plt.show()
```


```{python}
#| echo: true
#| eval: true
#| output: true

import ipywidgets as widgets
from IPython.display import display

slider = widgets.IntSlider(value=5, min=1, max=10, description='Zahl:')
output = widgets.Output()

def on_value_change(change):
    with output:
        output.clear_output()
        print(f"Das Quadrat von {change['new']} ist {change['new'] ** 2}")

slider.observe(on_value_change, names='value')

display(slider, output)
```